class Node:
    def __init__(self, symbol=None):
        self.left = None
        self.right = None
        self.data = symbol

    def __del__(self):
        if self.left is not None:
            del self.left
        if self.right is not None:
            del self.right
        del self.data
    
    def insert(self, bitstring, symbol):
        if bitstring == '':
            self.data = symbol
        elif bitstring[0] == '0':
            if self.left is None:
                self.left = Node()
            
            self.left.insert(bitstring[1:], symbol)
        elif bitstring[0] == '1':
            if self.right is None:
                self.right = Node()
            
            self.right.insert(bitstring[1:], symbol)

class Decoder:
    def __init__(self, symbol_map):
        self.root = Node()
        for (bit_string, symbol) in symbol_map.items():
            self.root.insert(bit_string, symbol)
    
    def __del__(self):
        del self.root

def prefix_free_decode(decoder, bit_string):
    ans = ''
    current_node = decoder.root
    for c in bit_string:
        if int(c) == 0:
            current_node = current_node.left
        elif int(c) == 1:
            current_node = current_node.right
        if current_node.data is not None:
            ans += current_node.data
            current_node = decoder.root
    return ans

s = {' ': '0', 's': '1000', 'n': '1001', 't': '101000', 'g': '10100100', 'N': '101001010', 'f': '101001011', 'Y': '1010011', 'e': '10101', 'y': '1011000', 'u': '1011001', 'A': '10110100', 'H': '10110101', '-': '10110110', 'c': '10110111', 'r': '10111', 'a': '1100', 'd': '110100', 'm': '1101010', 'w': '110101100', 'O': '110101101', ',': '110101110', 'b': '110101111', 'i': '11011', 'o': '1110', 'k': '11110', '.': '111110', 'h': '111111'}
b
s_ = {y:x for x,y in s.items()}
d = Decoder(s_)
print(prefix_free_decode(d, b))